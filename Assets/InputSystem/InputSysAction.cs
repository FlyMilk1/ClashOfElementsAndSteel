//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/InputSysAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSysAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSysAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSysAction"",
    ""maps"": [
        {
            ""name"": ""ScreenMovement"",
            ""id"": ""95989314-051e-43d6-8b0e-955161cc3963"",
            ""actions"": [
                {
                    ""name"": ""Touch"",
                    ""type"": ""Button"",
                    ""id"": ""4e451c1c-a6f3-4e50-a132-0f38ed9b969c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Swipe"",
                    ""type"": ""Value"",
                    ""id"": ""1cabd562-bda1-413b-b125-54338cbd69de"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0b7f5065-540b-463f-b4bc-c5493af01f32"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Mobile"",
                    ""action"": ""Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ec152d7-7ed5-4ddd-99d4-67bc92d0d3fa"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mobile"",
                    ""action"": ""Swipe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UnitControl"",
            ""id"": ""fe3619c7-d042-4bf5-a7c2-f042b4fdba6d"",
            ""actions"": [
                {
                    ""name"": ""Touch"",
                    ""type"": ""Button"",
                    ""id"": ""b004ce4c-2024-4ceb-b569-dd7ce4310813"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drag"",
                    ""type"": ""Value"",
                    ""id"": ""71aa79e1-12ff-4cfd-a4c7-f2657ba78bd5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a833b062-e175-4a47-a830-4ea5d20b3c86"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mobile"",
                    ""action"": ""Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a895e827-30fc-4057-ac79-42add84d9d69"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mobile"",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mobile"",
            ""bindingGroup"": ""Mobile"",
            ""devices"": []
        }
    ]
}");
        // ScreenMovement
        m_ScreenMovement = asset.FindActionMap("ScreenMovement", throwIfNotFound: true);
        m_ScreenMovement_Touch = m_ScreenMovement.FindAction("Touch", throwIfNotFound: true);
        m_ScreenMovement_Swipe = m_ScreenMovement.FindAction("Swipe", throwIfNotFound: true);
        // UnitControl
        m_UnitControl = asset.FindActionMap("UnitControl", throwIfNotFound: true);
        m_UnitControl_Touch = m_UnitControl.FindAction("Touch", throwIfNotFound: true);
        m_UnitControl_Drag = m_UnitControl.FindAction("Drag", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ScreenMovement
    private readonly InputActionMap m_ScreenMovement;
    private List<IScreenMovementActions> m_ScreenMovementActionsCallbackInterfaces = new List<IScreenMovementActions>();
    private readonly InputAction m_ScreenMovement_Touch;
    private readonly InputAction m_ScreenMovement_Swipe;
    public struct ScreenMovementActions
    {
        private @InputSysAction m_Wrapper;
        public ScreenMovementActions(@InputSysAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Touch => m_Wrapper.m_ScreenMovement_Touch;
        public InputAction @Swipe => m_Wrapper.m_ScreenMovement_Swipe;
        public InputActionMap Get() { return m_Wrapper.m_ScreenMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ScreenMovementActions set) { return set.Get(); }
        public void AddCallbacks(IScreenMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_ScreenMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ScreenMovementActionsCallbackInterfaces.Add(instance);
            @Touch.started += instance.OnTouch;
            @Touch.performed += instance.OnTouch;
            @Touch.canceled += instance.OnTouch;
            @Swipe.started += instance.OnSwipe;
            @Swipe.performed += instance.OnSwipe;
            @Swipe.canceled += instance.OnSwipe;
        }

        private void UnregisterCallbacks(IScreenMovementActions instance)
        {
            @Touch.started -= instance.OnTouch;
            @Touch.performed -= instance.OnTouch;
            @Touch.canceled -= instance.OnTouch;
            @Swipe.started -= instance.OnSwipe;
            @Swipe.performed -= instance.OnSwipe;
            @Swipe.canceled -= instance.OnSwipe;
        }

        public void RemoveCallbacks(IScreenMovementActions instance)
        {
            if (m_Wrapper.m_ScreenMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IScreenMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_ScreenMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ScreenMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ScreenMovementActions @ScreenMovement => new ScreenMovementActions(this);

    // UnitControl
    private readonly InputActionMap m_UnitControl;
    private List<IUnitControlActions> m_UnitControlActionsCallbackInterfaces = new List<IUnitControlActions>();
    private readonly InputAction m_UnitControl_Touch;
    private readonly InputAction m_UnitControl_Drag;
    public struct UnitControlActions
    {
        private @InputSysAction m_Wrapper;
        public UnitControlActions(@InputSysAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Touch => m_Wrapper.m_UnitControl_Touch;
        public InputAction @Drag => m_Wrapper.m_UnitControl_Drag;
        public InputActionMap Get() { return m_Wrapper.m_UnitControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UnitControlActions set) { return set.Get(); }
        public void AddCallbacks(IUnitControlActions instance)
        {
            if (instance == null || m_Wrapper.m_UnitControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UnitControlActionsCallbackInterfaces.Add(instance);
            @Touch.started += instance.OnTouch;
            @Touch.performed += instance.OnTouch;
            @Touch.canceled += instance.OnTouch;
            @Drag.started += instance.OnDrag;
            @Drag.performed += instance.OnDrag;
            @Drag.canceled += instance.OnDrag;
        }

        private void UnregisterCallbacks(IUnitControlActions instance)
        {
            @Touch.started -= instance.OnTouch;
            @Touch.performed -= instance.OnTouch;
            @Touch.canceled -= instance.OnTouch;
            @Drag.started -= instance.OnDrag;
            @Drag.performed -= instance.OnDrag;
            @Drag.canceled -= instance.OnDrag;
        }

        public void RemoveCallbacks(IUnitControlActions instance)
        {
            if (m_Wrapper.m_UnitControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUnitControlActions instance)
        {
            foreach (var item in m_Wrapper.m_UnitControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UnitControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UnitControlActions @UnitControl => new UnitControlActions(this);
    private int m_MobileSchemeIndex = -1;
    public InputControlScheme MobileScheme
    {
        get
        {
            if (m_MobileSchemeIndex == -1) m_MobileSchemeIndex = asset.FindControlSchemeIndex("Mobile");
            return asset.controlSchemes[m_MobileSchemeIndex];
        }
    }
    public interface IScreenMovementActions
    {
        void OnTouch(InputAction.CallbackContext context);
        void OnSwipe(InputAction.CallbackContext context);
    }
    public interface IUnitControlActions
    {
        void OnTouch(InputAction.CallbackContext context);
        void OnDrag(InputAction.CallbackContext context);
    }
}
